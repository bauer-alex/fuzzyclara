[{"path":"/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 Maximilian Weigert Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":[]},{"path":"/articles/main_functionality.html","id":"hard-clustering","dir":"Articles","previous_headings":"Clustering","what":"Hard clustering","title":"Functionality of fuzzyclara package","text":"","code":"cc_hard <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = \"euclidean\",                       samples     = 1,                       sample_size = NULL,                       type        = \"hard\",                       seed        = 3526,                       verbose     = 0) cc_hard ## Clustering results ##  ## Medoids ## [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" ##  ## Clustering ##  [1] 2 2 2 3 2 2 3 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 ## [39] 3 2 1 2 2 3 1 3 3 1 1 3 ##  ## Minimum average distance ## [1] 1.180717"},{"path":"/articles/main_functionality.html","id":"fuzzy-clustering","dir":"Articles","previous_headings":"Clustering","what":"Fuzzy clustering","title":"Functionality of fuzzyclara package","text":"","code":"cc_fuzzy <- fuzzyclara(data        = USArrests,                        clusters    = 3,                        metric      = \"euclidean\",                        samples     = 1,                        sample_size = NULL,                        type        = \"fuzzy\",                        m           = 2,                        seed        = 3526,                        verbose     = 0) cc_fuzzy ## Clustering results ##  ## Medoids ## [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" ##  ## Clustering ##  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 ## [39] 2 3 2 3 3 2 2 2 2 2 2 2 ##  ## Minimum average weighted distance ## [1] 1.94242 ##  ## Membership scores ##                 Cluster1  Cluster2  Cluster3 ## Alabama        0.2040878 0.2391714 0.5567409 ## Alaska         0.3373655 0.2726496 0.3899849 ## Arizona        1.0000000 0.0000000 0.0000000 ## Arkansas       0.2075892 0.3966215 0.3957893 ## California     0.5401685 0.2248051 0.2350264 ## Colorado       0.4475538 0.2744007 0.2780455 ## Connecticut    0.2348136 0.5280016 0.2371848 ## Delaware       0.2906227 0.4701428 0.2392345 ## Florida        0.4443412 0.2316682 0.3239905 ## Georgia        0.2091524 0.2149396 0.5759081 ## Hawaii         0.2482766 0.4883161 0.2634073 ## Idaho          0.2209589 0.5129169 0.2661242 ## Illinois       0.4666698 0.2739684 0.2593617 ## Indiana        0.1344369 0.6694262 0.1961369 ## Iowa           0.2311216 0.4905457 0.2783327 ## Kansas         0.1310680 0.6999444 0.1689876 ## Kentucky       0.1917648 0.4401893 0.3680459 ## Louisiana      0.2560625 0.2412981 0.5026393 ## Maine          0.2396947 0.4695769 0.2907285 ## Maryland       0.4281216 0.2306369 0.3412416 ## Massachusetts  0.2682437 0.5043343 0.2274220 ## Michigan       0.4467571 0.2192029 0.3340400 ## Minnesota      0.2158369 0.5379562 0.2462069 ## Mississippi    0.2484292 0.2817416 0.4698292 ## Missouri       0.2669546 0.3898602 0.3431852 ## Montana        0.1922866 0.5233027 0.2844107 ## Nebraska       0.1814854 0.5935543 0.2249603 ## Nevada         0.4372644 0.2469118 0.3158237 ## New Hampshire  0.2351771 0.4821286 0.2826942 ## New Jersey     0.3025875 0.4474846 0.2499279 ## New Mexico     0.4736616 0.2098122 0.3165261 ## New York       0.4959333 0.2489337 0.2551329 ## North Carolina 0.2984813 0.2995500 0.4019686 ## North Dakota   0.2525175 0.4409055 0.3065770 ## Ohio           0.1722044 0.6264071 0.2013885 ## Oklahoma       0.0000000 1.0000000 0.0000000 ## Oregon         0.2597840 0.4842455 0.2559705 ## Pennsylvania   0.1733916 0.6187011 0.2079073 ## Rhode Island   0.2938264 0.4548769 0.2512968 ## South Carolina 0.2521289 0.2569116 0.4909595 ## South Dakota   0.2294820 0.4627901 0.3077278 ## Tennessee      0.0000000 0.0000000 1.0000000 ## Texas          0.3315450 0.2977964 0.3706587 ## Utah           0.2550652 0.5204090 0.2245258 ## Vermont        0.2537642 0.4173744 0.3288614 ## Virginia       0.1470128 0.6016305 0.2513568 ## Washington     0.2420740 0.5403595 0.2175666 ## West Virginia  0.2356115 0.4301945 0.3341939 ## Wisconsin      0.2298126 0.5057011 0.2644864 ## Wyoming        0.1652925 0.6041126 0.2305949"},{"path":"/articles/main_functionality.html","id":"clustering-with-self-defined-distance-function-and-other-distance-functions","dir":"Articles","previous_headings":"Clustering","what":"Clustering with self-defined distance function and other distance functions","title":"Functionality of fuzzyclara package","text":"can also use distance functions proxy package like Gower, Manhattan etc. order specify arguments distance metric (e. g. p Minkowski distance), can use self-defined distance function.","code":"dist_function <- function(x, y) {   sqrt(sum((x - y)^2)) }  cc_dist <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = dist_function,                       samples     = 1,                       sample_size = NULL,                       type        = \"fuzzy\",                       m           = 2,                       seed        = 3526,                       verbose     = 0) cc_dist ## Clustering results ##  ## Medoids ## [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" ##  ## Clustering ##  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 ## [39] 2 3 2 3 3 2 2 2 2 2 2 2 ##  ## Minimum average weighted distance ## [1] 1.94242 ##  ## Membership scores ##                 Cluster1  Cluster2  Cluster3 ## Alabama        0.2040878 0.2391714 0.5567409 ## Alaska         0.3373655 0.2726496 0.3899849 ## Arizona        1.0000000 0.0000000 0.0000000 ## Arkansas       0.2075892 0.3966215 0.3957893 ## California     0.5401685 0.2248051 0.2350264 ## Colorado       0.4475538 0.2744007 0.2780455 ## Connecticut    0.2348136 0.5280016 0.2371848 ## Delaware       0.2906227 0.4701428 0.2392345 ## Florida        0.4443412 0.2316682 0.3239905 ## Georgia        0.2091524 0.2149396 0.5759081 ## Hawaii         0.2482766 0.4883161 0.2634073 ## Idaho          0.2209589 0.5129169 0.2661242 ## Illinois       0.4666698 0.2739684 0.2593617 ## Indiana        0.1344369 0.6694262 0.1961369 ## Iowa           0.2311216 0.4905457 0.2783327 ## Kansas         0.1310680 0.6999444 0.1689876 ## Kentucky       0.1917648 0.4401893 0.3680459 ## Louisiana      0.2560625 0.2412981 0.5026393 ## Maine          0.2396947 0.4695769 0.2907285 ## Maryland       0.4281216 0.2306369 0.3412416 ## Massachusetts  0.2682437 0.5043343 0.2274220 ## Michigan       0.4467571 0.2192029 0.3340400 ## Minnesota      0.2158369 0.5379562 0.2462069 ## Mississippi    0.2484292 0.2817416 0.4698292 ## Missouri       0.2669546 0.3898602 0.3431852 ## Montana        0.1922866 0.5233027 0.2844107 ## Nebraska       0.1814854 0.5935543 0.2249603 ## Nevada         0.4372644 0.2469118 0.3158237 ## New Hampshire  0.2351771 0.4821286 0.2826942 ## New Jersey     0.3025875 0.4474846 0.2499279 ## New Mexico     0.4736616 0.2098122 0.3165261 ## New York       0.4959333 0.2489337 0.2551329 ## North Carolina 0.2984813 0.2995500 0.4019686 ## North Dakota   0.2525175 0.4409055 0.3065770 ## Ohio           0.1722044 0.6264071 0.2013885 ## Oklahoma       0.0000000 1.0000000 0.0000000 ## Oregon         0.2597840 0.4842455 0.2559705 ## Pennsylvania   0.1733916 0.6187011 0.2079073 ## Rhode Island   0.2938264 0.4548769 0.2512968 ## South Carolina 0.2521289 0.2569116 0.4909595 ## South Dakota   0.2294820 0.4627901 0.3077278 ## Tennessee      0.0000000 0.0000000 1.0000000 ## Texas          0.3315450 0.2977964 0.3706587 ## Utah           0.2550652 0.5204090 0.2245258 ## Vermont        0.2537642 0.4173744 0.3288614 ## Virginia       0.1470128 0.6016305 0.2513568 ## Washington     0.2420740 0.5403595 0.2175666 ## West Virginia  0.2356115 0.4301945 0.3341939 ## Wisconsin      0.2298126 0.5057011 0.2644864 ## Wyoming        0.1652925 0.6041126 0.2305949 cc_manh <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = \"manhattan\",                       samples     = 1,                       sample_size = NULL,                       type        = \"hard\",                       seed        = 3526,                       verbose     = 0) cc_manh ## Clustering results ##  ## Medoids ## [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" ##  ## Clustering ##  [1] 2 2 2 3 2 2 1 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 ## [39] 3 2 1 2 2 3 1 3 3 1 1 3 ##  ## Minimum average distance ## [1] 2.011671 dist_mink <- function(x, y) {   proxy::dist(list(x, y), method = \"minkowski\", p = 1) } cc_mink <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = dist_mink,                       samples     = 1,                       sample_size = NULL,                       type        = \"hard\",                       seed        = 3526,                       verbose     = 0) cc_mink ## Clustering results ##  ## Medoids ## [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" ##  ## Clustering ##  [1] 2 2 2 3 2 2 1 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 ## [39] 3 2 1 2 2 3 1 3 3 1 1 3 ##  ## Minimum average distance ## [1] 2.011671"},{"path":"/articles/main_functionality.html","id":"select-optimal-number-of-clusters","dir":"Articles","previous_headings":"Clustering","what":"Select optimal number of clusters","title":"Functionality of fuzzyclara package","text":"","code":"cc_number <- evaluate_cluster_numbers(                        data            = USArrests,                        clusters_range  = 2:6,                        metric          = \"euclidean\",                        samples         = 1,                        sample_size     = NULL,                        type            = \"hard\",                        seed            = 3526,                        verbose         = 0) cc_number"},{"path":"/articles/main_functionality.html","id":"plot-of-clustering-results","dir":"Articles","previous_headings":"","what":"Plot of clustering results","title":"Functionality of fuzzyclara package","text":"","code":"# Enrich the USArrest dataset by area and state  USArrests_enriched <- USArrests %>%    mutate(State = as.factor(rownames(USArrests)),          Area  = as.factor(case_when(State %in% c(\"Washington\", \"Oregon\",                  \"California\", \"Nevada\", \"Arizona\", \"Idaho\", \"Montana\",                  \"Wyoming\", \"Colorado\", \"New Mexico\", \"Utah\", \"Hawaii\",                  \"Alaska\") ~ \"West\",                  State %in% c(\"Texas\", \"Oklahoma\", \"Arkansas\", \"Louisiana\",                  \"Mississippi\", \"Alabama\", \"Tennessee\", \"Kentucky\", \"Georgia\",                  \"Florida\", \"South Carolina\", \"North Carolina\", \"Virginia\",                  \"West Virginia\") ~ \"South\",                  State %in% c(\"Kansas\", \"Nebraska\", \"South Dakota\",                  \"North Dakota\", \"Minnesota\", \"Missouri\", \"Iowa\", \"Illinois\",                  \"Indiana\", \"Michigan\", \"Wisconsin\", \"Ohio\") ~ \"Midwest\",                  State %in% c(\"Maine\", \"New Hampshire\", \"New York\",                  \"Massachusetts\", \"Rhode Island\", \"Vermont\", \"Pennsylvania\",                  \"New Jersey\", \"Connecticut\", \"Delaware\", \"Maryland\") ~                    \"Northeast\")))"},{"path":"/articles/main_functionality.html","id":"boxplot","dir":"Articles","previous_headings":"Plot of clustering results","what":"Boxplot","title":"Functionality of fuzzyclara package","text":"","code":"plot(x        = cc_hard,      data     = USArrests_enriched,      variable = \"Assault\")"},{"path":"/articles/main_functionality.html","id":"barplot","dir":"Articles","previous_headings":"Plot of clustering results","what":"Barplot","title":"Functionality of fuzzyclara package","text":"","code":"plot(x        = cc_hard,      data     = USArrests_enriched,      variable = \"Area\")"},{"path":"/articles/main_functionality.html","id":"wordcloud","dir":"Articles","previous_headings":"Plot of clustering results","what":"Wordcloud","title":"Functionality of fuzzyclara package","text":"","code":"plot(x        = cc_hard,      data     = USArrests_enriched,      variable = \"State\",      type     = \"wordclouds\")"},{"path":"/articles/main_functionality.html","id":"scatterplot","dir":"Articles","previous_headings":"Plot of clustering results","what":"Scatterplot","title":"Functionality of fuzzyclara package","text":"fuzzy clustering, can focus one clusters plot membership probability:","code":"plot(x     = cc_hard,      data  = USArrests_enriched,      type  = \"scatterplot\",      x_var = \"Murder\",      y_var = \"Assault\") ## `geom_smooth()` using formula = 'y ~ x' plot(x     = cc_fuzzy,      data  = USArrests_enriched,      type  = \"scatterplot\",      x_var = \"Murder\",      y_var = \"Assault\",       focus = TRUE) plot(x              = cc_fuzzy,      data           = USArrests_enriched,      type           = \"scatterplot\",      x_var          = \"Murder\",      y_var          = \"Assault\",       focus          = TRUE,      focus_clusters = c(1))"},{"path":"/articles/main_functionality.html","id":"pca","dir":"Articles","previous_headings":"Plot of clustering results","what":"PCA","title":"Functionality of fuzzyclara package","text":"fuzzy clustering, can focus one clusters plot membership probability:","code":"plot(x        = cc_hard,      data     = USArrests_enriched,       type     = \"pca\",      group_by = \"Area\") plot(x     = cc_fuzzy,      data  = USArrests_enriched,      type  = \"pca\",      focus = TRUE) plot(x              = cc_fuzzy,      data           = USArrests_enriched,      type           = \"pca\",      focus          = TRUE,      focus_clusters = c(1))"},{"path":"/articles/main_functionality.html","id":"silhouette","dir":"Articles","previous_headings":"Plot of clustering results","what":"Silhouette","title":"Functionality of fuzzyclara package","text":"","code":"plot(x    = cc_hard,      data = USArrests,      type = \"silhouette\") ## $plot ##  ## $silhouette_table ##   Cluster Size Silhouette width ## 1       1   10        0.4604416 ## 2       2   19        0.2757843 ## 3       3   21        0.2797126 ##  ## $average_silhouette_width ## [1] 0.3143656"},{"path":"/articles/main_functionality.html","id":"fuzzy-clustering-threshold-for-membership-scores","dir":"Articles","previous_headings":"Plot of clustering results","what":"Fuzzy clustering: Threshold for membership scores","title":"Functionality of fuzzyclara package","text":"","code":"plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"pca\",      variable             = \"Assault\",      membership_threshold = 0) plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"pca\",      variable             = \"Assault\",      membership_threshold = 0.5) plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"scatterplot\",      x_var                = \"Murder\",      y_var                = \"Assault\",      membership_threshold = 0) plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"scatterplot\",      x_var                = \"Murder\",      y_var                = \"Assault\",      membership_threshold = 0.5) ## Warning in qt((1 - level)/2, df): NaNs produced ## Warning in max(ids, na.rm = TRUE): no non-missing arguments to max; returning ## -Inf plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"scatterplot\",      x_var                = \"Murder\",      y_var                = \"Assault\",      membership_threshold = 0.5,      plot_all_fuzzy       = TRUE) ## Warning in qt((1 - level)/2, df): NaNs produced ## Warning in qt((1 - level)/2, df): no non-missing arguments to max; returning ## -Inf plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"pca\",      group_by             = \"Area\",      membership_threshold = 0) plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"pca\",      group_by             = \"Area\",      membership_threshold = 0.5) plot(x                    = cc_fuzzy,      data                 = USArrests_enriched,      type                 = \"pca\",      group_by             = \"Area\",      membership_threshold = 0.5,      plot_all_fuzzy       = TRUE)"},{"path":[]},{"path":"/articles/vignette_shiny.html","id":"section-hard-clustering","dir":"Articles","previous_headings":"Clustering","what":"Hard clustering","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"cc_hard <- fuzzyclara(data        = USArrests,                        clusters    = 3,                        metric      = \"euclidean\",                        samples     = 1,                        sample_size = NULL,                        type        = \"hard\",                        seed        = 3526,                        verbose     = 0) cc_hard ## Clustering results ##  ## Medoids ## [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" ##  ## Clustering ##  [1] 2 2 2 3 2 2 3 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 ## [39] 3 2 1 2 2 3 1 3 3 1 1 3 ##  ## Minimum average distance ## [1] 1.180717"},{"path":"/articles/vignette_shiny.html","id":"section-fuzzy-clustering","dir":"Articles","previous_headings":"Clustering","what":"Fuzzy clustering","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"cc_fuzzy <- fuzzyclara(data        = USArrests,                        clusters    = 3,                        metric      = \"euclidean\",                        samples     = 1,                        sample_size = NULL,                        type        = \"fuzzy\",                        m           = 2,                        seed        = 3526,                        verbose     = 0) cc_fuzzy ## Clustering results ##  ## Medoids ## [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" ##  ## Clustering ##  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 ## [39] 2 3 2 3 3 2 2 2 2 2 2 2 ##  ## Minimum average weighted distance ## [1] 1.94242 ##  ## Membership scores ##                 Cluster1  Cluster2  Cluster3 ## Alabama        0.2040878 0.2391714 0.5567409 ## Alaska         0.3373655 0.2726496 0.3899849 ## Arizona        1.0000000 0.0000000 0.0000000 ## Arkansas       0.2075892 0.3966215 0.3957893 ## California     0.5401685 0.2248051 0.2350264 ## Colorado       0.4475538 0.2744007 0.2780455 ## Connecticut    0.2348136 0.5280016 0.2371848 ## Delaware       0.2906227 0.4701428 0.2392345 ## Florida        0.4443412 0.2316682 0.3239905 ## Georgia        0.2091524 0.2149396 0.5759081 ## Hawaii         0.2482766 0.4883161 0.2634073 ## Idaho          0.2209589 0.5129169 0.2661242 ## Illinois       0.4666698 0.2739684 0.2593617 ## Indiana        0.1344369 0.6694262 0.1961369 ## Iowa           0.2311216 0.4905457 0.2783327 ## Kansas         0.1310680 0.6999444 0.1689876 ## Kentucky       0.1917648 0.4401893 0.3680459 ## Louisiana      0.2560625 0.2412981 0.5026393 ## Maine          0.2396947 0.4695769 0.2907285 ## Maryland       0.4281216 0.2306369 0.3412416 ## Massachusetts  0.2682437 0.5043343 0.2274220 ## Michigan       0.4467571 0.2192029 0.3340400 ## Minnesota      0.2158369 0.5379562 0.2462069 ## Mississippi    0.2484292 0.2817416 0.4698292 ## Missouri       0.2669546 0.3898602 0.3431852 ## Montana        0.1922866 0.5233027 0.2844107 ## Nebraska       0.1814854 0.5935543 0.2249603 ## Nevada         0.4372644 0.2469118 0.3158237 ## New Hampshire  0.2351771 0.4821286 0.2826942 ## New Jersey     0.3025875 0.4474846 0.2499279 ## New Mexico     0.4736616 0.2098122 0.3165261 ## New York       0.4959333 0.2489337 0.2551329 ## North Carolina 0.2984813 0.2995500 0.4019686 ## North Dakota   0.2525175 0.4409055 0.3065770 ## Ohio           0.1722044 0.6264071 0.2013885 ## Oklahoma       0.0000000 1.0000000 0.0000000 ## Oregon         0.2597840 0.4842455 0.2559705 ## Pennsylvania   0.1733916 0.6187011 0.2079073 ## Rhode Island   0.2938264 0.4548769 0.2512968 ## South Carolina 0.2521289 0.2569116 0.4909595 ## South Dakota   0.2294820 0.4627901 0.3077278 ## Tennessee      0.0000000 0.0000000 1.0000000 ## Texas          0.3315450 0.2977964 0.3706587 ## Utah           0.2550652 0.5204090 0.2245258 ## Vermont        0.2537642 0.4173744 0.3288614 ## Virginia       0.1470128 0.6016305 0.2513568 ## Washington     0.2420740 0.5403595 0.2175666 ## West Virginia  0.2356115 0.4301945 0.3341939 ## Wisconsin      0.2298126 0.5057011 0.2644864 ## Wyoming        0.1652925 0.6041126 0.2305949"},{"path":"/articles/vignette_shiny.html","id":"section-clustering-with-self-defined-distance-function-and-other-distance-functions","dir":"Articles","previous_headings":"Clustering","what":"Clustering with self-defined distance function and other distance functions","title":"Functionality of fuzzyclara package (interactive)","text":"can also use distance functions proxy package like Gower, Manhattan etc. order specify arguments distance metric (e. g. p Minkowski distance), can use self-defined distance function.","code":"dist_function <- function(x, y) {   sqrt(sum((x - y)^2)) }  cc_dist <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = dist_function,                       samples     = 1,                       sample_size = NULL,                       type        = \"fuzzy\",                       m           = 2,                       seed        = 3526,                       verbose     = 0) cc_dist ## Clustering results ##  ## Medoids ## [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" ##  ## Clustering ##  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 ## [39] 2 3 2 3 3 2 2 2 2 2 2 2 ##  ## Minimum average weighted distance ## [1] 1.94242 ##  ## Membership scores ##                 Cluster1  Cluster2  Cluster3 ## Alabama        0.2040878 0.2391714 0.5567409 ## Alaska         0.3373655 0.2726496 0.3899849 ## Arizona        1.0000000 0.0000000 0.0000000 ## Arkansas       0.2075892 0.3966215 0.3957893 ## California     0.5401685 0.2248051 0.2350264 ## Colorado       0.4475538 0.2744007 0.2780455 ## Connecticut    0.2348136 0.5280016 0.2371848 ## Delaware       0.2906227 0.4701428 0.2392345 ## Florida        0.4443412 0.2316682 0.3239905 ## Georgia        0.2091524 0.2149396 0.5759081 ## Hawaii         0.2482766 0.4883161 0.2634073 ## Idaho          0.2209589 0.5129169 0.2661242 ## Illinois       0.4666698 0.2739684 0.2593617 ## Indiana        0.1344369 0.6694262 0.1961369 ## Iowa           0.2311216 0.4905457 0.2783327 ## Kansas         0.1310680 0.6999444 0.1689876 ## Kentucky       0.1917648 0.4401893 0.3680459 ## Louisiana      0.2560625 0.2412981 0.5026393 ## Maine          0.2396947 0.4695769 0.2907285 ## Maryland       0.4281216 0.2306369 0.3412416 ## Massachusetts  0.2682437 0.5043343 0.2274220 ## Michigan       0.4467571 0.2192029 0.3340400 ## Minnesota      0.2158369 0.5379562 0.2462069 ## Mississippi    0.2484292 0.2817416 0.4698292 ## Missouri       0.2669546 0.3898602 0.3431852 ## Montana        0.1922866 0.5233027 0.2844107 ## Nebraska       0.1814854 0.5935543 0.2249603 ## Nevada         0.4372644 0.2469118 0.3158237 ## New Hampshire  0.2351771 0.4821286 0.2826942 ## New Jersey     0.3025875 0.4474846 0.2499279 ## New Mexico     0.4736616 0.2098122 0.3165261 ## New York       0.4959333 0.2489337 0.2551329 ## North Carolina 0.2984813 0.2995500 0.4019686 ## North Dakota   0.2525175 0.4409055 0.3065770 ## Ohio           0.1722044 0.6264071 0.2013885 ## Oklahoma       0.0000000 1.0000000 0.0000000 ## Oregon         0.2597840 0.4842455 0.2559705 ## Pennsylvania   0.1733916 0.6187011 0.2079073 ## Rhode Island   0.2938264 0.4548769 0.2512968 ## South Carolina 0.2521289 0.2569116 0.4909595 ## South Dakota   0.2294820 0.4627901 0.3077278 ## Tennessee      0.0000000 0.0000000 1.0000000 ## Texas          0.3315450 0.2977964 0.3706587 ## Utah           0.2550652 0.5204090 0.2245258 ## Vermont        0.2537642 0.4173744 0.3288614 ## Virginia       0.1470128 0.6016305 0.2513568 ## Washington     0.2420740 0.5403595 0.2175666 ## West Virginia  0.2356115 0.4301945 0.3341939 ## Wisconsin      0.2298126 0.5057011 0.2644864 ## Wyoming        0.1652925 0.6041126 0.2305949 cc_manh <- fuzzyclara(data        = USArrests,                        clusters    = 3,                        metric      = \"manhattan\",                        samples     = 1,                        sample_size = NULL,                        type        = \"hard\",                        seed        = 3526,                        verbose     = 0) cc_manh ## Clustering results ##  ## Medoids ## [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" ##  ## Clustering ##  [1] 2 2 2 3 2 2 1 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 ## [39] 3 2 1 2 2 3 1 3 3 1 1 3 ##  ## Minimum average distance ## [1] 2.011671 dist_mink <- function(x, y) {   proxy::dist(list(x, y), method = \"minkowski\", p = 1) } cc_mink <- fuzzyclara(data        = USArrests,                        clusters    = 3,                        metric      = dist_mink,                        samples     = 1,                        sample_size = NULL,                        type        = \"hard\",                        seed        = 3526,                        verbose     = 0) cc_mink ## Clustering results ##  ## Medoids ## [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" ##  ## Clustering ##  [1] 2 2 2 3 2 2 1 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 ## [39] 3 2 1 2 2 3 1 3 3 1 1 3 ##  ## Minimum average distance ## [1] 2.011671"},{"path":"/articles/vignette_shiny.html","id":"section-select-optimal-number-of-clusters","dir":"Articles","previous_headings":"Clustering","what":"Select optimal number of clusters","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"cc_number <- evaluate_cluster_numbers(                        data            = USArrests,                        clusters_range  = 2:6,                        metric          = \"euclidean\",                        samples         = 1,                        sample_size     = NULL,                        type            = \"hard\",                        seed            = 3526,                        verbose         = 0) cc_number"},{"path":"/articles/vignette_shiny.html","id":"section-plot-of-clustering-results","dir":"Articles","previous_headings":"","what":"Plot of clustering results","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"# Enrich the USArrest dataset by area and state  USArrests_enriched <- USArrests %>%    mutate(State = as.factor(rownames(USArrests)),          Area  = as.factor(case_when(State %in% c(\"Washington\", \"Oregon\",                  \"California\", \"Nevada\", \"Arizona\", \"Idaho\", \"Montana\",                  \"Wyoming\", \"Colorado\", \"New Mexico\", \"Utah\", \"Hawaii\",                  \"Alaska\") ~ \"West\",                  State %in% c(\"Texas\", \"Oklahoma\", \"Arkansas\", \"Louisiana\",                  \"Mississippi\", \"Alabama\", \"Tennessee\", \"Kentucky\", \"Georgia\",                  \"Florida\", \"South Carolina\", \"North Carolina\", \"Virginia\",                  \"West Virginia\") ~ \"South\",                  State %in% c(\"Kansas\", \"Nebraska\", \"South Dakota\",                  \"North Dakota\", \"Minnesota\", \"Missouri\", \"Iowa\", \"Illinois\",                  \"Indiana\", \"Michigan\", \"Wisconsin\", \"Ohio\") ~ \"Midwest\",                  State %in% c(\"Maine\", \"New Hampshire\", \"New York\",                  \"Massachusetts\", \"Rhode Island\", \"Vermont\", \"Pennsylvania\",                  \"New Jersey\", \"Connecticut\", \"Delaware\", \"Maryland\") ~                    \"Northeast\")))"},{"path":"/articles/vignette_shiny.html","id":"section-boxplot","dir":"Articles","previous_headings":"Plot of clustering results","what":"Boxplot","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"plot(x = cc_fuzzy, data = USArrests_enriched, variable = \"Assault\")"},{"path":"/articles/vignette_shiny.html","id":"section-barplot","dir":"Articles","previous_headings":"Plot of clustering results","what":"Barplot","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"plot(x = cc_fuzzy, data = USArrests_enriched, variable = \"Area\")"},{"path":"/articles/vignette_shiny.html","id":"section-wordcloud","dir":"Articles","previous_headings":"Plot of clustering results","what":"Wordcloud","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"plot(x = cc_fuzzy, data = USArrests_enriched, variable = \"State\",      type = \"wordclouds\")"},{"path":"/articles/vignette_shiny.html","id":"section-scatterplot","dir":"Articles","previous_headings":"Plot of clustering results","what":"Scatterplot","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\") ## `geom_smooth()` using formula = 'y ~ x' plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\",       focus = TRUE)"},{"path":"/articles/vignette_shiny.html","id":"section-pca","dir":"Articles","previous_headings":"Plot of clustering results","what":"PCA","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      group_by = \"Area\") plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      focus = TRUE)"},{"path":"/articles/vignette_shiny.html","id":"section-silhouette","dir":"Articles","previous_headings":"Plot of clustering results","what":"Silhouette","title":"Functionality of fuzzyclara package (interactive)","text":"","code":"plot(x = cc_fuzzy, data = USArrests, type = \"silhouette\") ## $plot ##  ## $silhouette_table ##   Cluster Size Silhouette width ## 1       1   10        0.3802710 ## 2       2   31        0.3786707 ## 3       3    9        0.2383694 ##  ## $average_silhouette_width ## [1] 0.3537365"},{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Maximilian Weigert. Author. Alexander Bauer. Author, maintainer. Jana Gauss. Author. Asmik Nalmpatian. Contributor. Theresa Kriecherbauer. Contributor.","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Weigert M, Bauer , Gauss J (2025). fuzzyclara: Efficient Medoid-based Clustering Algorithms Large Fuzzy Data. R package version 1.0.1, https://bauer-alex.github.io/fuzzyclara/.","code":"@Manual{,   title = {fuzzyclara: Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data},   author = {Maximilian Weigert and Alexander Bauer and Jana Gauss},   year = {2025},   note = {R package version 1.0.1},   url = {https://bauer-alex.github.io/fuzzyclara/}, }"},{"path":"/index.html","id":"fuzzyclara-","dir":"","previous_headings":"","what":"Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data","title":"Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data","text":"Efficient fuzzy clustering based CLARA algorithm Authors: Maximilian Weigert, Alexander Bauer, Jana Gauss Contributors: Theresa Kriecherbauer, Asmik Nalmpatian Version: 1.0.1","code":""},{"path":"/index.html","id":"aim-of-this-package","dir":"","previous_headings":"","what":"Aim of this Package","title":"Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data","text":"fuzzyclara package tackles two issues cluster analysis applications. First, includes routines fuzzy clustering avoid common hard clustering assumption observation clear member one sole cluster. Instead, membership probabilities indicate extent characteristics observation shaped characteristics several ‘typical’ clusters. Second, estimation classical clustering algorithms often hardly feasible large data situations thousands observations. Subsampling-based algorithms building CLARA algorithm implemented make estimation feasible situations. Building two points, ‘fuzzyclara’ package offers routines aspects cluster analysis, including use user-defined distance functions diverse visualization techniques.","code":""},{"path":"/index.html","id":"documentation-and-useful-materials","dir":"","previous_headings":"","what":"Documentation and Useful Materials","title":"Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data","text":"get overview functionalities package, check package vignette.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data","text":"current version GitHub can installed via","code":"devtools::install_github(\"bauer-alex/fuzzyclara\")"},{"path":"/index.html","id":"how-to-contribute","dir":"","previous_headings":"","what":"How to Contribute","title":"Efficient Medoid-based Clustering Algorithms for Large and Fuzzy Data","text":"encounter problems package, find bugs suggestions additional functionalities please open GitHub issue. Alternatively, feel free contact us directly via email. Contributions (via pull requests otherwise) welcome. Please adhere Advanced R style guide contributing code. open pull request share updates us, please make sure unit tests pass without errors warning messages. can run unit tests calling","code":"devtools::test()"},{"path":"/reference/assign_cluster.html","id":null,"dir":"Reference","previous_headings":"","what":"Assign a cluster to each observation of the entire dataset — assign_cluster","title":"Assign a cluster to each observation of the entire dataset — assign_cluster","text":"Function assign cluster observation entire dataset selecting closest medoid","code":""},{"path":"/reference/assign_cluster.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Assign a cluster to each observation of the entire dataset — assign_cluster","text":"","code":"assign_cluster(   data,   metric,   medoids,   dist_matrix = NULL,   type = \"hard\",   m = 2,   data_medoids = NULL,   return_distMatrix = FALSE,   return_data_medoids = FALSE )"},{"path":"/reference/assign_cluster.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Assign a cluster to each observation of the entire dataset — assign_cluster","text":"data Entire data.frame metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. medoids Medoids obtained clustering solution data sample dist_matrix Optional dissimilarity matrix (defaults NULL) type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. data_medoids data.frame variable information medoids return_distMatrix Indicator distances cluster medoids returned. Defaults FALSE. return_data_medoids Indicator medoid data returned. Defaults FALSE.","code":""},{"path":"/reference/assign_cluster.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Assign a cluster to each observation of the entire dataset — assign_cluster","text":"List information cluster results (medoid, cluster assignment, average distance closest medoid (weighted average distance closest medoid case fuzzy clustering))","code":""},{"path":"/reference/calculate_memb_score.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate membership score of one observation for each medoid — calculate_memb_score","title":"Calculate membership score of one observation for each medoid — calculate_memb_score","text":"Function calculate membership score one observation medoid based distance observation medoids","code":""},{"path":"/reference/calculate_memb_score.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate membership score of one observation for each medoid — calculate_memb_score","text":"","code":"calculate_memb_score(dist_med, m = 2)"},{"path":"/reference/calculate_memb_score.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate membership score of one observation for each medoid — calculate_memb_score","text":"dist_med Vector distances medoids m Fuzziness exponent, numeric minimum 1. Defaults 2.","code":""},{"path":"/reference/calculate_memb_score.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate membership score of one observation for each medoid — calculate_memb_score","text":"List membership scores one observation","code":""},{"path":"/reference/clara_barplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function barplot — clara_barplot","title":"Plot function barplot — clara_barplot","text":"Function plot barplot","code":""},{"path":"/reference/clara_barplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function barplot — clara_barplot","text":"","code":"clara_barplot(   x,   data,   variable,   group_by = NULL,   na.omit = FALSE,   membership_threshold = 0 )"},{"path":"/reference/clara_barplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function barplot — clara_barplot","text":"x object class \"fuzzyclara\" data Prepared data.frame (contains cluster variable, observations already filtered threshold (fuzzy)) variable Name variable plot group_by Optional grouping variable na.omit missing values excluded plotting? Defaults FALSE. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0.","code":""},{"path":"/reference/clara_barplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function barplot — clara_barplot","text":"barplot","code":""},{"path":"/reference/clara_boxplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function boxplot — clara_boxplot","title":"Plot function boxplot — clara_boxplot","text":"Function plot boxplot","code":""},{"path":"/reference/clara_boxplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function boxplot — clara_boxplot","text":"","code":"clara_boxplot(   x,   data,   variable,   group_by = NULL,   na.omit = FALSE,   membership_threshold = 0 )"},{"path":"/reference/clara_boxplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function boxplot — clara_boxplot","text":"x object class \"fuzzyclara\" data Prepared data.frame (contains cluster variable, observations already filtered threshold (fuzzy)) variable Name variable plot group_by Optional grouping variable na.omit missing values excluded plotting? Defaults FALSE. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0.","code":""},{"path":"/reference/clara_boxplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function boxplot — clara_boxplot","text":"boxplot","code":""},{"path":"/reference/clara_parallel.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function parallel coordinate plot — clara_parallel","title":"Plot function parallel coordinate plot — clara_parallel","text":"Function plot parallel coordinate plot","code":""},{"path":"/reference/clara_parallel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function parallel coordinate plot — clara_parallel","text":"","code":"clara_parallel(   x,   data,   membership_threshold = 0,   seed = 42,   plot_membership_scores = FALSE,   sample_percentage = 0.2 )"},{"path":"/reference/clara_parallel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function parallel coordinate plot — clara_parallel","text":"x object class \"fuzzyclara\" data Prepared data.frame (contains cluster variable, observations already filtered threshold (fuzzy)) membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0. seed random number seed plot_membership_scores Boolean value indicating whether cluster membership scores observations indicated line transparency (TRUE) (FALSE) sample_percentage Percentage value indicates percentage observations randomly selected representation plot. Must number 0 1. Defaults 0.2.","code":""},{"path":"/reference/clara_parallel.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function parallel coordinate plot — clara_parallel","text":"parallel coordinate plot","code":""},{"path":"/reference/clara_pca.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function PCA — clara_pca","title":"Plot function PCA — clara_pca","text":"Function plot PCA results","code":""},{"path":"/reference/clara_pca.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function PCA — clara_pca","text":"","code":"clara_pca(   x,   data,   group_by = NULL,   plot_all_fuzzy = TRUE,   membership_threshold = 0,   alpha_fuzzy = 0.4,   focus = FALSE,   focus_clusters = NULL )"},{"path":"/reference/clara_pca.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function PCA — clara_pca","text":"x object class \"fuzzyclara\" data data.frame matrix used clustering group_by Optional grouping variable plot_all_fuzzy fuzzy clustering threshold: observations threshold plotted transparent? Defaults TRUE. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0. alpha_fuzzy Alpha value observations threshold, relevant plot_all_fuzzy = TRUE. Defaults 0.4. focus fuzzy clustering, focus clusters given variable focus_clusters plot observations based probability belonging respective cluster. Defaults FALSE. focus_clusters Optional vector integers focus specific clusters.","code":""},{"path":"/reference/clara_pca.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function PCA — clara_pca","text":"PCA plot","code":""},{"path":"/reference/clara_scatterplot.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function scatterplot — clara_scatterplot","title":"Plot function scatterplot — clara_scatterplot","text":"Function plot scatterplot","code":""},{"path":"/reference/clara_scatterplot.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function scatterplot — clara_scatterplot","text":"","code":"clara_scatterplot(   x,   data,   x_var,   y_var,   plot_all_fuzzy = TRUE,   membership_threshold = 0,   alpha_fuzzy = 0.4,   focus = FALSE,   focus_clusters = NULL,   na.omit = FALSE )"},{"path":"/reference/clara_scatterplot.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function scatterplot — clara_scatterplot","text":"x object class \"fuzzyclara\" data data.frame matrix used clustering x_var, y_var Names x y variable plot_all_fuzzy fuzzy clustering threshold: observations threshold plotted transparent? Defaults TRUE. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0. alpha_fuzzy Alpha value observations threshold, relevant fuzzy clustering focus = FALSE. Defaults 0.4. focus fuzzy clustering, focus clusters given variable focus_clusters plot observations based probability belonging respective cluster. Defaults FALSE. focus_clusters Optional vector integers focus specific clusters na.omit missing values excluded plotting? Defaults FALSE.","code":""},{"path":"/reference/clara_scatterplot.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function scatterplot — clara_scatterplot","text":"scatterplot","code":""},{"path":"/reference/clara_silhouette.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function silhouette — clara_silhouette","title":"Plot function silhouette — clara_silhouette","text":"Function plot scatterplot","code":""},{"path":"/reference/clara_silhouette.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function silhouette — clara_silhouette","text":"","code":"clara_silhouette(   x,   data,   metric = \"euclidean\",   silhouette_subsample = FALSE,   scale_sil = TRUE,   silhouette_table = TRUE,   membership_threshold = 0 )"},{"path":"/reference/clara_silhouette.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function silhouette — clara_silhouette","text":"x object class \"fuzzyclara\" data data.frame matrix used clustering metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". Irrelevant silhouette_subsample TRUE. silhouette_subsample Use subsample 'x' silhouette plot instead samples? Defaults FALSE. scale_sil Scale numeric variables silhouette plot? Defaults TRUE. Irrelevant silhouette_subsample TRUE. silhouette_table table silhouette results returned together plot? Defaults TRUE. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0.","code":""},{"path":"/reference/clara_silhouette.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function silhouette — clara_silhouette","text":"silhouette plot","code":""},{"path":"/reference/clara_wordcloud.html","id":null,"dir":"Reference","previous_headings":"","what":"Plot function wordcloud — clara_wordcloud","title":"Plot function wordcloud — clara_wordcloud","text":"Function plot wordcloud","code":""},{"path":"/reference/clara_wordcloud.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Plot function wordcloud — clara_wordcloud","text":"","code":"clara_wordcloud(   x,   data,   variable,   na.omit = na.omit,   seed = 42,   membership_threshold = 0 )"},{"path":"/reference/clara_wordcloud.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Plot function wordcloud — clara_wordcloud","text":"x object class \"fuzzyclara\" data Prepared data.frame (contains cluster variable, observations already filtered threshold (fuzzy)) variable Name variable plot na.omit missing values excluded plotting? Defaults FALSE. seed Random number seed. Defaults 42. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0.","code":""},{"path":"/reference/clara_wordcloud.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Plot function wordcloud — clara_wordcloud","text":"wordcloud plot","code":""},{"path":"/reference/clustering_clara.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform CLARA clustering algorithm — clustering_clara","title":"Perform CLARA clustering algorithm — clustering_clara","text":"Function perform CLARA clustering hard fuzzy way. function can either called using common dissimilarity metric self-defined distance function.","code":""},{"path":"/reference/clustering_clara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform CLARA clustering algorithm — clustering_clara","text":"","code":"clustering_clara(   data,   clusters = 5,   metric = \"euclidean\",   samples = 10,   sample_size = NULL,   type = \"hard\",   cores = 1,   seed = 1234,   m = 1.5,   verbose = 1,   build = FALSE,   ... )"},{"path":"/reference/clustering_clara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform CLARA clustering algorithm — clustering_clara","text":"data data.frame clustered clusters Number clusters. Defaults 5. metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. samples Number subsamples sample_size Number observations belonging sample. NULL (default), minimum nrow(data) 40 + clusters * 2 used sample size. type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. cores Numbers cores computation. cores > 1 implies parallel call. Defaults 1. seed Random number seed. Defaults 1234. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. build Additional build algorithm choose initial medoids (relevant type = \"fuzzy\". Default FALSE.) ... Additional arguments passed main clustering algorithm proxy::dist calculation distance matrix (pam vegclust)","code":""},{"path":"/reference/clustering_clara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform CLARA clustering algorithm — clustering_clara","text":"Object class fuzzyclara","code":""},{"path":"/reference/clustering_clara.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform CLARA clustering algorithm — clustering_clara","text":"clustering run mulitple cores, verbose messages printed file clustering_progress.log (verbose > 0).","code":""},{"path":"/reference/clustering_clara.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform CLARA clustering algorithm — clustering_clara","text":"Kaufman, L., Rousseeuw, P. J. (1986). Clustering large data sets. Pattern Recognition Practice, 425–437.","code":""},{"path":"/reference/clustering_clarans.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform CLARANS clustering — clustering_clarans","title":"Perform CLARANS clustering — clustering_clarans","text":"Function perform CLARANS clustering hard fuzzy way. function can either called using common dissimilarity metric self-defined distance function.","code":""},{"path":"/reference/clustering_clarans.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform CLARANS clustering — clustering_clarans","text":"","code":"clustering_clarans(   data,   clusters = 5,   metric = \"euclidean\",   type = \"hard\",   num_local = 5,   max_neighbors = 100,   cores = 1,   seed = 1234,   m = 1.5,   verbose = 1,   ... )"},{"path":"/reference/clustering_clarans.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform CLARANS clustering — clustering_clarans","text":"data data.frame clustered clusters Number clusters. Defaults 5. metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. num_local Number clustering iterations. Defaults 5. (pam vegclust) max_neighbors Maximum number randomized medoid searches cluster. Defaults 100. cores Numbers cores computation. cores > 1 implies parallel call. Defaults 1. seed Random number seed. Defaults 1234. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. ... Additional arguments passed main clustering algorithm proxy::dist calculation distance matrix (pam vegclust)","code":""},{"path":"/reference/clustering_clarans.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform CLARANS clustering — clustering_clarans","text":"Object class fuzzyclara","code":""},{"path":"/reference/clustering_clarans.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform CLARANS clustering — clustering_clarans","text":"clustering run mulitple cores, verbose messages printed file clustering_progress.log (verbose > 0).","code":""},{"path":"/reference/clustering_clarans.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform CLARANS clustering — clustering_clarans","text":"Ng, R. T., Han, J. (2002). CLARANS: method clustering objects spatial data mining. IEEE transactions knowledge data engineering, 14(5), 1003–1016. doi:10.1109/tkde.2002.1033770 .","code":""},{"path":"/reference/clustering_local.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform a local iteration of CLARANS clustering — clustering_local","title":"Perform a local iteration of CLARANS clustering — clustering_local","text":"Function perform local iteration CLARANS clustering algorithm hard fuzzy way. function can either called using common dissimilarity metric self-defined distance function.","code":""},{"path":"/reference/clustering_local.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform a local iteration of CLARANS clustering — clustering_local","text":"","code":"clustering_local(   data,   sample_local,   clusters = 5,   metric = \"euclidean\",   max_neighbors = 100,   type = \"hard\",   m = 1.5,   verbose = 1,   verbose_toLogFile = FALSE,   ... )"},{"path":"/reference/clustering_local.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform a local iteration of CLARANS clustering — clustering_local","text":"data data.frame clustered sample_local list containing information pairs medoids non-medoids tested swapping well starting medoids algorithm clusters Number clusters. Defaults 5. metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. max_neighbors Maximum number randomized medoid searches cluster (algorithm = \"clarans\") type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. verbose_toLogFile TRUE, diagnostic messages printed log file clustering_progress.log. Defaults FALSE. ... Additional arguments passed main clustering algorithm (pam vegclust)","code":""},{"path":"/reference/clustering_local.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform a local iteration of CLARANS clustering — clustering_local","text":"Clustering solution data sample","code":""},{"path":"/reference/clustering_local.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform a local iteration of CLARANS clustering — clustering_local","text":"Ng, R. T., Han, J. (2002). CLARANS: method clustering objects spatial data mining. IEEE transactions knowledge data engineering, 14(5), 1003–1016. doi:10.1109/tkde.2002.1033770 .","code":""},{"path":"/reference/clustering_sample.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform clustering algorithm on a data sample — clustering_sample","title":"Perform clustering algorithm on a data sample — clustering_sample","text":"Function perform clara clustering algorithm hard fuzzy way. function can either performed using common dissimilarity metric self-defined distance function.","code":""},{"path":"/reference/clustering_sample.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform clustering algorithm on a data sample — clustering_sample","text":"","code":"clustering_sample(   data,   sample_ids,   dist,   clusters = 5,   metric = \"euclidean\",   sample_size = NULL,   type = \"hard\",   seed = 1234,   m = 1.5,   verbose = 1,   verbose_toLogFile = FALSE,   build = FALSE,   ... )"},{"path":"/reference/clustering_sample.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform clustering algorithm on a data sample — clustering_sample","text":"data data.frame clustered sample_ids ids sample's observations dist Dissimilarity matrix subsample clusters Number clusters. Defaults 5. metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. sample_size Number observations belonging sample type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. seed Random number seed. Defaults 1234. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. verbose_toLogFile TRUE, diagnostic messages printed log file clustering_progress.log. Defaults FALSE. build Additional build algorithm choose initial medoids (relevant type = \"fuzzy\". Default FALSE.) ... Additional arguments passed main clustering algorithm (pam vegclust)","code":""},{"path":"/reference/clustering_sample.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform clustering algorithm on a data sample — clustering_sample","text":"Clustering solution data sample","code":""},{"path":"/reference/compute_distance_matrix.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute the dissimilarity matrix for a data sample — compute_distance_matrix","title":"Compute the dissimilarity matrix for a data sample — compute_distance_matrix","text":"Function compute dissimilarity matrix based specified metric","code":""},{"path":"/reference/compute_distance_matrix.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute the dissimilarity matrix for a data sample — compute_distance_matrix","text":"","code":"compute_distance_matrix(data, sample_ids, metric = \"euclidean\")"},{"path":"/reference/compute_distance_matrix.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute the dissimilarity matrix for a data sample — compute_distance_matrix","text":"data Sample data.frame clustered sample_ids ids sample's observations metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details.","code":""},{"path":"/reference/compute_distance_matrix.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute the dissimilarity matrix for a data sample — compute_distance_matrix","text":"Dissimilarity matrix data sample","code":""},{"path":"/reference/evaluate_cluster_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of the selection criterion for different cluster numbers — evaluate_cluster_numbers","title":"Visualization of the selection criterion for different cluster numbers — evaluate_cluster_numbers","text":"Function provide graphical visualization selecting optimal number clusters. function performs clustering range potential numbers clusters. optional graphical visualization shows minimal (weighted) average distance every cluster numbers. Detailed fuzzyclara clustering results can returned return_results = TRUE. clara clustering, samples used numbers clusters.","code":""},{"path":"/reference/evaluate_cluster_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of the selection criterion for different cluster numbers — evaluate_cluster_numbers","text":"","code":"evaluate_cluster_numbers(   data,   clusters_range = 2:5,   metric = \"euclidean\",   algorithm = \"clara\",   samples = 10,   sample_size = NULL,   num_local = 5,   max_neighbors = 100,   type = \"hard\",   cores = 1,   seed = 1234,   m = 1.5,   scale = TRUE,   build = FALSE,   verbose = 1,   plot = TRUE,   return_results = FALSE,   ... )"},{"path":"/reference/evaluate_cluster_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of the selection criterion for different cluster numbers — evaluate_cluster_numbers","text":"data data.frame clustered clusters_range Evaluated range number clusters. Defaults 2:5. metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. algorithm One c(\"clara\",\"clarans\") samples Number subsamples sample_size Number observations belonging sample. NULL (default), minimum nrow(data) 40 + clusters * 2 used sample size. num_local Number clustering iterations (algorithm = \"clarans\"). max_neighbors Maximum number randomized medoid searches cluster (algorithm = \"clarans\") type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. cores Numbers cores computation. cores > 1 implies parallel call. Defaults 1. seed Random number seed. Defaults 1234. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. scale Scale numeric variables distance matrix calculation? Default TRUE build Additional build algorithm choose initial medoids (relevant type = \"fuzzy\". Default FALSE.) verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. plot plot minimum distances returned? Defaults TRUE. return_results Indicator clustering results (\"fuzzyclara\" objects) returned list. Defaults FALSE. ... Additional arguments passed main clustering algorithm call fuzzyclara.","code":""},{"path":"/reference/evaluate_cluster_numbers.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of the selection criterion for different cluster numbers — evaluate_cluster_numbers","text":"Object class \"fuzzyclara\"","code":""},{"path":"/reference/evaluate_cluster_numbers.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of the selection criterion for different cluster numbers — evaluate_cluster_numbers","text":"","code":"# Select optimal number of clusters cc_number <- evaluate_cluster_numbers(data            = USArrests,                                       clusters_range  = 2:6,                                       metric          = \"euclidean\",                                       samples         = 1,                                       sample_size     = NULL,                                       type            = \"hard\",                                       seed            = 3526,                                       verbose         = 0) cc_number"},{"path":"/reference/fuzzyclara.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform clustering — fuzzyclara","title":"Perform clustering — fuzzyclara","text":"Function perform cluster analysis hard fuzzy way. function can either performed using common dissimilarity metric self-defined distance function.","code":""},{"path":"/reference/fuzzyclara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform clustering — fuzzyclara","text":"","code":"fuzzyclara(   data,   clusters = 5,   metric = \"euclidean\",   algorithm = \"clara\",   samples = 10,   sample_size = NULL,   max_neighbors = 100,   num_local = 10,   type = \"hard\",   cores = 1,   seed = 1234,   m = 1.5,   verbose = 1,   scale = TRUE,   build = FALSE,   ... )"},{"path":"/reference/fuzzyclara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform clustering — fuzzyclara","text":"data data.frame matrix clustered clusters Number clusters. Defaults 5. metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. algorithm One c(\"clara\",\"clarans\") samples Number subsamples (algorithm = \"clara\") sample_size Number observations belonging sample. NULL (default), minimum nrow(data) 40 + clusters * 2 used sample size. (algorithm = \"clara\") max_neighbors Maximum number randomized medoid searches cluster (algorithm = \"clarans\") num_local Number clustering iterations (algorithm = \"clarans\") type One c(\"hard\",\"fuzzy\"), specifying type clustering performed. cores Numbers cores computation. cores > 1 implies parallel call. Defaults 1. seed Random number seed. Defaults 1234. m Fuzziness exponent (type = \"fuzzy\"), numeric minimum 1. Defaults 2. verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. scale Scale numeric variables distance matrix calculation? Default TRUE build Additional build algorithm choose initial medoids (relevant type = \"fuzzy\". Default FALSE.) ... Additional arguments passed main clustering algorithm proxy::dist calculation distance matrix (pam vegclust)","code":""},{"path":"/reference/fuzzyclara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform clustering — fuzzyclara","text":"Object class \"fuzzyclara\"","code":""},{"path":"/reference/fuzzyclara.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Perform clustering — fuzzyclara","text":"clustering run mulitple cores, verbose messages printed file clustering_progress.log (verbose > 0).","code":""},{"path":"/reference/fuzzyclara.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Perform clustering — fuzzyclara","text":"Kaufman, L., Rousseeuw, P. J. (1986). Clustering large data sets. Pattern Recognition Practice, 425–437. Ng, R. T., Han, J. (2002). CLARANS: method clustering objects spatial data mining. IEEE transactions knowledge data engineering, 14(5), 1003–1016. doi:10.1109/tkde.2002.1033770 .","code":""},{"path":"/reference/fuzzyclara.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Perform clustering — fuzzyclara","text":"","code":"# Hard clustering cc_hard <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = \"euclidean\",                       samples     = 1,                       sample_size = NULL,                       type        = \"hard\",                       seed        = 3526,                       verbose     = 0) cc_hard #> Clustering results #>  #> Medoids #> [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" #>  #> Clustering #>  [1] 2 2 2 3 2 2 3 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 #> [39] 3 2 1 2 2 3 1 3 3 1 1 3 #>  #> Minimum average distance #> [1] 1.180717  # Fuzzy clustering cc_fuzzy <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = \"euclidean\",                       samples     = 1,                       sample_size = NULL,                       type        = \"fuzzy\",                       m           = 2,                       seed        = 3526,                       verbose     = 0) cc_fuzzy #> Clustering results #>  #> Medoids #> [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" #>  #> Clustering #>  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 #> [39] 2 3 2 3 3 2 2 2 2 2 2 2 #>  #> Minimum average weighted distance #> [1] 1.94242 #>  #> Membership scores #>                 Cluster1  Cluster2  Cluster3 #> Alabama        0.2040878 0.2391714 0.5567409 #> Alaska         0.3373655 0.2726496 0.3899849 #> Arizona        1.0000000 0.0000000 0.0000000 #> Arkansas       0.2075892 0.3966215 0.3957893 #> California     0.5401685 0.2248051 0.2350264 #> Colorado       0.4475538 0.2744007 0.2780455 #> Connecticut    0.2348136 0.5280016 0.2371848 #> Delaware       0.2906227 0.4701428 0.2392345 #> Florida        0.4443412 0.2316682 0.3239905 #> Georgia        0.2091524 0.2149396 0.5759081 #> Hawaii         0.2482766 0.4883161 0.2634073 #> Idaho          0.2209589 0.5129169 0.2661242 #> Illinois       0.4666698 0.2739684 0.2593617 #> Indiana        0.1344369 0.6694262 0.1961369 #> Iowa           0.2311216 0.4905457 0.2783327 #> Kansas         0.1310680 0.6999444 0.1689876 #> Kentucky       0.1917648 0.4401893 0.3680459 #> Louisiana      0.2560625 0.2412981 0.5026393 #> Maine          0.2396947 0.4695769 0.2907285 #> Maryland       0.4281216 0.2306369 0.3412416 #> Massachusetts  0.2682437 0.5043343 0.2274220 #> Michigan       0.4467571 0.2192029 0.3340400 #> Minnesota      0.2158369 0.5379562 0.2462069 #> Mississippi    0.2484292 0.2817416 0.4698292 #> Missouri       0.2669546 0.3898602 0.3431852 #> Montana        0.1922866 0.5233027 0.2844107 #> Nebraska       0.1814854 0.5935543 0.2249603 #> Nevada         0.4372644 0.2469118 0.3158237 #> New Hampshire  0.2351771 0.4821286 0.2826942 #> New Jersey     0.3025875 0.4474846 0.2499279 #> New Mexico     0.4736616 0.2098122 0.3165261 #> New York       0.4959333 0.2489337 0.2551329 #> North Carolina 0.2984813 0.2995500 0.4019686 #> North Dakota   0.2525175 0.4409055 0.3065770 #> Ohio           0.1722044 0.6264071 0.2013885 #> Oklahoma       0.0000000 1.0000000 0.0000000 #> Oregon         0.2597840 0.4842455 0.2559705 #> Pennsylvania   0.1733916 0.6187011 0.2079073 #> Rhode Island   0.2938264 0.4548769 0.2512968 #> South Carolina 0.2521289 0.2569116 0.4909595 #> South Dakota   0.2294820 0.4627901 0.3077278 #> Tennessee      0.0000000 0.0000000 1.0000000 #> Texas          0.3315450 0.2977964 0.3706587 #> Utah           0.2550652 0.5204090 0.2245258 #> Vermont        0.2537642 0.4173744 0.3288614 #> Virginia       0.1470128 0.6016305 0.2513568 #> Washington     0.2420740 0.5403595 0.2175666 #> West Virginia  0.2356115 0.4301945 0.3341939 #> Wisconsin      0.2298126 0.5057011 0.2644864 #> Wyoming        0.1652925 0.6041126 0.2305949  # Fuzzy clustering with self-defined distance function dist_function <- function(x, y) { sqrt(sum((x - y)^2)) }  cc_dist <- fuzzyclara(data        = USArrests,                      clusters    = 3,                      metric      = dist_function,                      samples     = 1,                      sample_size = NULL,                      type        = \"fuzzy\",                      m           = 2,                      seed        = 3526,                      verbose     = 0) cc_dist #> Clustering results #>  #> Medoids #> [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" #>  #> Clustering #>  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 #> [39] 2 3 2 3 3 2 2 2 2 2 2 2 #>  #> Minimum average weighted distance #> [1] 1.94242 #>  #> Membership scores #>                 Cluster1  Cluster2  Cluster3 #> Alabama        0.2040878 0.2391714 0.5567409 #> Alaska         0.3373655 0.2726496 0.3899849 #> Arizona        1.0000000 0.0000000 0.0000000 #> Arkansas       0.2075892 0.3966215 0.3957893 #> California     0.5401685 0.2248051 0.2350264 #> Colorado       0.4475538 0.2744007 0.2780455 #> Connecticut    0.2348136 0.5280016 0.2371848 #> Delaware       0.2906227 0.4701428 0.2392345 #> Florida        0.4443412 0.2316682 0.3239905 #> Georgia        0.2091524 0.2149396 0.5759081 #> Hawaii         0.2482766 0.4883161 0.2634073 #> Idaho          0.2209589 0.5129169 0.2661242 #> Illinois       0.4666698 0.2739684 0.2593617 #> Indiana        0.1344369 0.6694262 0.1961369 #> Iowa           0.2311216 0.4905457 0.2783327 #> Kansas         0.1310680 0.6999444 0.1689876 #> Kentucky       0.1917648 0.4401893 0.3680459 #> Louisiana      0.2560625 0.2412981 0.5026393 #> Maine          0.2396947 0.4695769 0.2907285 #> Maryland       0.4281216 0.2306369 0.3412416 #> Massachusetts  0.2682437 0.5043343 0.2274220 #> Michigan       0.4467571 0.2192029 0.3340400 #> Minnesota      0.2158369 0.5379562 0.2462069 #> Mississippi    0.2484292 0.2817416 0.4698292 #> Missouri       0.2669546 0.3898602 0.3431852 #> Montana        0.1922866 0.5233027 0.2844107 #> Nebraska       0.1814854 0.5935543 0.2249603 #> Nevada         0.4372644 0.2469118 0.3158237 #> New Hampshire  0.2351771 0.4821286 0.2826942 #> New Jersey     0.3025875 0.4474846 0.2499279 #> New Mexico     0.4736616 0.2098122 0.3165261 #> New York       0.4959333 0.2489337 0.2551329 #> North Carolina 0.2984813 0.2995500 0.4019686 #> North Dakota   0.2525175 0.4409055 0.3065770 #> Ohio           0.1722044 0.6264071 0.2013885 #> Oklahoma       0.0000000 1.0000000 0.0000000 #> Oregon         0.2597840 0.4842455 0.2559705 #> Pennsylvania   0.1733916 0.6187011 0.2079073 #> Rhode Island   0.2938264 0.4548769 0.2512968 #> South Carolina 0.2521289 0.2569116 0.4909595 #> South Dakota   0.2294820 0.4627901 0.3077278 #> Tennessee      0.0000000 0.0000000 1.0000000 #> Texas          0.3315450 0.2977964 0.3706587 #> Utah           0.2550652 0.5204090 0.2245258 #> Vermont        0.2537642 0.4173744 0.3288614 #> Virginia       0.1470128 0.6016305 0.2513568 #> Washington     0.2420740 0.5403595 0.2175666 #> West Virginia  0.2356115 0.4301945 0.3341939 #> Wisconsin      0.2298126 0.5057011 0.2644864 #> Wyoming        0.1652925 0.6041126 0.2305949  # Hard clustering with other distance function cc_manh <- fuzzyclara(data        = USArrests,                      clusters    = 3,                      metric      = \"manhattan\",                      samples     = 1,                      sample_size = NULL,                      type        = \"hard\",                      seed        = 3526,                      verbose     = 0)  cc_manh #> Clustering results #>  #> Medoids #> [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" #>  #> Clustering #>  [1] 2 2 2 3 2 2 1 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 #> [39] 3 2 1 2 2 3 1 3 3 1 1 3 #>  #> Minimum average distance #> [1] 2.011671  # Hard clustering with Minkowski distance      # In order to specify arguments of the distance metric (e. g. p for      # Minkowski distance),       # you can use a self-defined distance function.  dist_mink <- function(x, y) { proxy::dist(list(x, y), method = \"minkowski\", p = 1) } cc_mink <- fuzzyclara(data        = USArrests,                      clusters    = 3,                      metric      = dist_mink,                      samples     = 1,                      sample_size = NULL,                      type        = \"hard\",                      seed        = 3526,                      verbose     = 0) cc_mink #> Clustering results #>  #> Medoids #> [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" #>  #> Clustering #>  [1] 2 2 2 3 2 2 1 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 #> [39] 3 2 1 2 2 3 1 3 3 1 1 3 #>  #> Minimum average distance #> [1] 2.011671"},{"path":"/reference/perform_sample_clustering.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform pam or vegclust clustering on a data sample — perform_sample_clustering","title":"Perform pam or vegclust clustering on a data sample — perform_sample_clustering","text":"Function perform pam hard fuzzy way data sample","code":""},{"path":"/reference/perform_sample_clustering.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform pam or vegclust clustering on a data sample — perform_sample_clustering","text":"","code":"perform_sample_clustering(   dist,   data,   clusters,   type,   metric,   names,   m = 2,   build = FALSE,   verbose = 1,   verbose_toLogFile = FALSE,   ... )"},{"path":"/reference/perform_sample_clustering.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform pam or vegclust clustering on a data sample — perform_sample_clustering","text":"dist Dissimilarity matrix data Data sample clusters Number clusters type Hard fuzzy clustering metric character specifying predefined dissimilarity metric (like \"euclidean\" \"manhattan\") self-defined dissimilarity function. Defaults \"euclidean\". passed argument method dist, check ?proxy::dist full details. names Vector names observations m Fuzziness exponent (type = fuzzy) build Additional build algorithm choose initial medoids (relevant type = \"fuzzy\". Default FALSE.) verbose Can set integers 0 2 control level detail printed diagnostic messages. Higher numbers lead detailed messages. Defaults 1. verbose_toLogFile TRUE, diagnostic messages printed log file clustering_progress.log. Defaults FALSE. ... Additional arguments passed main clustering algorithm (pam vegclust)","code":""},{"path":"/reference/perform_sample_clustering.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform pam or vegclust clustering on a data sample — perform_sample_clustering","text":"List information cluster results (medoid cluster assignment)","code":""},{"path":"/reference/plot.fuzzyclara.html","id":null,"dir":"Reference","previous_headings":"","what":"Visualization of clustering solution by variables — plot.fuzzyclara","title":"Visualization of clustering solution by variables — plot.fuzzyclara","text":"Function provide graphical visualization distribution","code":""},{"path":"/reference/plot.fuzzyclara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Visualization of clustering solution by variables — plot.fuzzyclara","text":"","code":"# S3 method for class 'fuzzyclara' plot(   x,   data,   type = NULL,   variable = NULL,   na.omit = FALSE,   membership_threshold = 0,   sample_percentage = 1,   plot_membership_scores = FALSE,   seed = 42,   ... )"},{"path":"/reference/plot.fuzzyclara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Visualization of clustering solution by variables — plot.fuzzyclara","text":"x object class \"fuzzyclara\" data data.frame matrix used clustering type, variable Type plot. One c(\"barplot\",\"boxplot\",\"wordclouds\", \"silhouette\",\"pca\",\"scatterplot\", \"parallel\"). Defaults NULL, either plots barplot boxplot, depending class variable. na.omit missing values excluded plotting? Defaults FALSE. membership_threshold Threshold fuzzy clustering observations plotted. Must number 0 1. Defaults 0. sample_percentage Percentage value indicates percentage observations randomly selected representation plot. Must number 0 1. Defaults 1. plot_membership_scores Boolean value indicating whether cluster membership scores observations indicated line transparency (TRUE) (FALSE). Defaults FALSE. seed random number seed (needed clara_wordcloud clara_parallel) ... arguments internal plot functions.","code":""},{"path":"/reference/plot.fuzzyclara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Visualization of clustering solution by variables — plot.fuzzyclara","text":"Clustering plot","code":""},{"path":"/reference/plot.fuzzyclara.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Visualization of clustering solution by variables — plot.fuzzyclara","text":"","code":"# Prepare data for example (enrich the USArrest dataset by area and state) library(dplyr) #>  #> Attaching package: ‘dplyr’ #> The following objects are masked from ‘package:stats’: #>  #>     filter, lag #> The following objects are masked from ‘package:base’: #>  #>     intersect, setdiff, setequal, union USArrests_enriched <- USArrests %>%    mutate(State = as.factor(rownames(USArrests)),          Area  = as.factor(case_when(State %in% c(\"Washington\", \"Oregon\",                                                \"California\", \"Nevada\",                                                \"Arizona\", \"Idaho\", \"Montana\",                                                \"Wyoming\", \"Colorado\",                                                \"New Mexico\", \"Utah\", \"Hawaii\",                                                \"Alaska\") ~ \"West\",                                   State %in% c(\"Texas\", \"Oklahoma\", \"Arkansas\",                                                \"Louisiana\", \"Mississippi\",                                                \"Alabama\", \"Tennessee\",                                                \"Kentucky\", \"Georgia\",                                                \"Florida\", \"South Carolina\",                                                \"North Carolina\", \"Virginia\",                                                \"West Virginia\") ~ \"South\",                                   State %in% c(\"Kansas\", \"Nebraska\", \"South Dakota\",                                                \"North Dakota\", \"Minnesota\",                                                \"Missouri\", \"Iowa\", \"Illinois\",                                                \"Indiana\", \"Michigan\", \"Wisconsin\",                                                \"Ohio\") ~ \"Midwest\",                                   State %in% c(\"Maine\", \"New Hampshire\", \"New York\",                                                \"Massachusetts\", \"Rhode Island\",                                                \"Vermont\", \"Pennsylvania\",                                                \"New Jersey\", \"Connecticut\",                                                \"Delaware\", \"Maryland\") ~                                                \"Northeast\"))) # Determine clusters that will be plotted                                  cc_hard <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = \"euclidean\",                       samples     = 1,                       sample_size = NULL,                       type        = \"hard\",                       seed        = 3526,                       verbose     = 0) cc_hard #> Clustering results #>  #> Medoids #> [1] \"New Mexico\"    \"Oklahoma\"      \"New Hampshire\" #>  #> Clustering #>  [1] 2 2 2 3 2 2 3 3 2 2 3 1 2 3 1 3 3 2 1 2 3 2 1 2 3 3 3 2 1 3 2 2 2 1 3 3 3 3 #> [39] 3 2 1 2 2 3 1 3 3 1 1 3 #>  #> Minimum average distance #> [1] 1.180717  cc_fuzzy <- fuzzyclara(data        = USArrests,                       clusters    = 3,                       metric      = \"euclidean\",                       samples     = 1,                       sample_size = NULL,                       type        = \"fuzzy\",                       m           = 2,                       seed        = 3526,                       verbose     = 0) cc_fuzzy #> Clustering results #>  #> Medoids #> [1] \"Oklahoma\"  \"Arizona\"   \"Tennessee\" #>  #> Clustering #>  [1] 3 3 1 2 1 1 2 2 1 3 2 2 1 2 2 2 2 3 2 1 2 1 2 3 2 2 2 1 2 2 1 1 3 2 2 2 2 2 #> [39] 2 3 2 3 3 2 2 2 2 2 2 2 #>  #> Minimum average weighted distance #> [1] 1.94242 #>  #> Membership scores #>                 Cluster1  Cluster2  Cluster3 #> Alabama        0.2040878 0.2391714 0.5567409 #> Alaska         0.3373655 0.2726496 0.3899849 #> Arizona        1.0000000 0.0000000 0.0000000 #> Arkansas       0.2075892 0.3966215 0.3957893 #> California     0.5401685 0.2248051 0.2350264 #> Colorado       0.4475538 0.2744007 0.2780455 #> Connecticut    0.2348136 0.5280016 0.2371848 #> Delaware       0.2906227 0.4701428 0.2392345 #> Florida        0.4443412 0.2316682 0.3239905 #> Georgia        0.2091524 0.2149396 0.5759081 #> Hawaii         0.2482766 0.4883161 0.2634073 #> Idaho          0.2209589 0.5129169 0.2661242 #> Illinois       0.4666698 0.2739684 0.2593617 #> Indiana        0.1344369 0.6694262 0.1961369 #> Iowa           0.2311216 0.4905457 0.2783327 #> Kansas         0.1310680 0.6999444 0.1689876 #> Kentucky       0.1917648 0.4401893 0.3680459 #> Louisiana      0.2560625 0.2412981 0.5026393 #> Maine          0.2396947 0.4695769 0.2907285 #> Maryland       0.4281216 0.2306369 0.3412416 #> Massachusetts  0.2682437 0.5043343 0.2274220 #> Michigan       0.4467571 0.2192029 0.3340400 #> Minnesota      0.2158369 0.5379562 0.2462069 #> Mississippi    0.2484292 0.2817416 0.4698292 #> Missouri       0.2669546 0.3898602 0.3431852 #> Montana        0.1922866 0.5233027 0.2844107 #> Nebraska       0.1814854 0.5935543 0.2249603 #> Nevada         0.4372644 0.2469118 0.3158237 #> New Hampshire  0.2351771 0.4821286 0.2826942 #> New Jersey     0.3025875 0.4474846 0.2499279 #> New Mexico     0.4736616 0.2098122 0.3165261 #> New York       0.4959333 0.2489337 0.2551329 #> North Carolina 0.2984813 0.2995500 0.4019686 #> North Dakota   0.2525175 0.4409055 0.3065770 #> Ohio           0.1722044 0.6264071 0.2013885 #> Oklahoma       0.0000000 1.0000000 0.0000000 #> Oregon         0.2597840 0.4842455 0.2559705 #> Pennsylvania   0.1733916 0.6187011 0.2079073 #> Rhode Island   0.2938264 0.4548769 0.2512968 #> South Carolina 0.2521289 0.2569116 0.4909595 #> South Dakota   0.2294820 0.4627901 0.3077278 #> Tennessee      0.0000000 0.0000000 1.0000000 #> Texas          0.3315450 0.2977964 0.3706587 #> Utah           0.2550652 0.5204090 0.2245258 #> Vermont        0.2537642 0.4173744 0.3288614 #> Virginia       0.1470128 0.6016305 0.2513568 #> Washington     0.2420740 0.5403595 0.2175666 #> West Virginia  0.2356115 0.4301945 0.3341939 #> Wisconsin      0.2298126 0.5057011 0.2644864 #> Wyoming        0.1652925 0.6041126 0.2305949                                      # Boxplot plot(x = cc_hard, data = USArrests_enriched, variable = \"Assault\")    # Barplot plot(x = cc_hard, data = USArrests_enriched, variable = \"Area\")   # Wordcloud plot(x = cc_hard, data = USArrests_enriched, variable = \"State\",       type = \"wordclouds\", seed = 123)                                                                           # Scatterplot plot(x = cc_hard, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\")    #> `geom_smooth()` using formula = 'y ~ x'   # Plot membership probability for fuzzy clustering plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\",       focus = TRUE)   # Plot membership probability for fuzzy clustering (one cluster only) plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\",       focus = TRUE, focus_clusters = c(1))          # PCA plot(x = cc_hard, data = USArrests_enriched, type = \"pca\",      group_by = \"Area\")         # Plot membership probability for one or more clusters following a PCA     plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      focus = TRUE)               plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      focus = TRUE, focus_clusters = c(1))           # Silhouette plot plot(x = cc_hard, data = USArrests, type = \"silhouette\")   #> $plot  #>  #> $silhouette_table #>   Cluster Size Silhouette width #> 1       1   10        0.4604416 #> 2       2   19        0.2757843 #> 3       3   21        0.2797126 #>  #> $average_silhouette_width #> [1] 0.3143656 #>    # Plot clusters for fuzzy clustering (using threshold for membership scores) plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      variable = \"Assault\", membership_threshold = 0)           plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      variable = \"Assault\", membership_threshold = 0.5)                 plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\", membership_threshold = 0)   #> `geom_smooth()` using formula = 'y ~ x'        plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\", membership_threshold = 0.5)      #> `geom_smooth()` using formula = 'y ~ x' #> Warning: NaNs produced #> Warning: no non-missing arguments to max; returning -Inf     plot(x = cc_fuzzy, data = USArrests_enriched, type = \"scatterplot\",      x_var = \"Murder\", y_var = \"Assault\", membership_threshold = 0.5,      plot_all_fuzzy = TRUE)   #> `geom_smooth()` using formula = 'y ~ x' #> Warning: NaNs produced #> Warning: no non-missing arguments to max; returning -Inf     plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      group_by = \"Area\", membership_threshold = 0)              plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      group_by = \"Area\", membership_threshold = 0.5)        plot(x = cc_fuzzy, data = USArrests_enriched, type = \"pca\",      group_by = \"Area\", membership_threshold = 0.5, plot_all_fuzzy = TRUE)        # Parallel Plot plot(x = cc_fuzzy, data = USArrests_enriched,       type = \"parallel\", sample_percentage = 1, plot_membership_scores = TRUE)"},{"path":"/reference/plot_cluster_numbers.html","id":null,"dir":"Reference","previous_headings":"","what":"Function to provide graphical visualization for selecting the optimal number of clusters. The function provides graphical visualization showing the minimal (weighted) average distance for every cluster number. — plot_cluster_numbers","title":"Function to provide graphical visualization for selecting the optimal number of clusters. The function provides graphical visualization showing the minimal (weighted) average distance for every cluster number. — plot_cluster_numbers","text":"Function provide graphical visualization selecting optimal number clusters. function provides graphical visualization showing minimal (weighted) average distance every cluster number.","code":""},{"path":"/reference/plot_cluster_numbers.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Function to provide graphical visualization for selecting the optimal number of clusters. The function provides graphical visualization showing the minimal (weighted) average distance for every cluster number. — plot_cluster_numbers","text":"","code":"plot_cluster_numbers(cluster_results, clusters_range = NULL)"},{"path":"/reference/plot_cluster_numbers.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Function to provide graphical visualization for selecting the optimal number of clusters. The function provides graphical visualization showing the minimal (weighted) average distance for every cluster number. — plot_cluster_numbers","text":"cluster_results List fuzzyclara clustering results different numbers clusters. clusters_range Optional range number clusters. Defaults NULL.","code":""},{"path":"/reference/predict.fuzzyclara.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of cluster assignments — predict.fuzzyclara","title":"Prediction of cluster assignments — predict.fuzzyclara","text":"Function predict cluster assignments","code":""},{"path":"/reference/predict.fuzzyclara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of cluster assignments — predict.fuzzyclara","text":"","code":"# S3 method for class 'fuzzyclara' predict(object, newdata, ...)"},{"path":"/reference/predict.fuzzyclara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of cluster assignments — predict.fuzzyclara","text":"object object class \"fuzzyclara\" newdata data.frame containing variables based predictions calculated ... arguments predict functions","code":""},{"path":"/reference/predict.fuzzyclara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of cluster assignments — predict.fuzzyclara","text":"clustering plot tibble","code":""},{"path":"/reference/predict.fuzzyclara.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of cluster assignments — predict.fuzzyclara","text":"","code":"# Split data intp test and training data train_indices <- sample(x = nrow(USArrests), size = 0.7*nrow(USArrests)) USArrests_train <- USArrests[train_indices, ] USArrests_test <- USArrests[-train_indices, ]  # Determine fuzzy clusters on training data  cc_fuzzy <- fuzzyclara(data        = USArrests_train,                        clusters    = 3,                        metric      = \"euclidean\",                        samples     = 1,                        sample_size = NULL,                        type        = \"fuzzy\",                        m           = 2,                        seed        = 3526,                        verbose     = 0) #> Warning: The specified sample size is equal to the number of #>     observations in the data. PAM clustering is performed on the entire data. cc_fuzzy #> Clustering results #>  #> Medoids #> [1] \"Missouri\"   \"Kansas\"     \"New Mexico\" #>  #> Clustering #>  [1] 3 1 3 1 1 2 1 2 2 1 1 2 2 2 2 2 2 1 2 2 2 3 2 2 2 2 2 1 1 1 1 2 3 2 2 #>  #> Minimum average weighted distance #> [1] 1.752737 #>  #> Membership scores #>                 Cluster1  Cluster2  Cluster3 #> New Jersey     0.2500264 0.3724113 0.3775623 #> Georgia        0.3933379 0.2502455 0.3564166 #> Oregon         0.2096447 0.3374293 0.4529260 #> Arizona        0.4910670 0.1862710 0.3226621 #> South Carolina 0.4028542 0.2632170 0.3339288 #> Hawaii         0.2010352 0.4736478 0.3253169 #> Illinois       0.3893153 0.2262988 0.3843859 #> Maine          0.2105460 0.5049071 0.2845470 #> Oklahoma       0.1310228 0.5877583 0.2812189 #> Maryland       0.6500466 0.1276540 0.2222994 #> New Mexico     1.0000000 0.0000000 0.0000000 #> Kentucky       0.2095222 0.4742663 0.3162115 #> Arkansas       0.2611842 0.3822406 0.3565752 #> Minnesota      0.1564806 0.6006110 0.2429084 #> Kansas         0.0000000 1.0000000 0.0000000 #> Indiana        0.1089868 0.6601315 0.2308817 #> Vermont        0.2479323 0.4389313 0.3131364 #> California     0.4337389 0.2210383 0.3452229 #> Wyoming        0.1653750 0.5654147 0.2692104 #> North Dakota   0.2305061 0.4692949 0.3001990 #> Idaho          0.1866650 0.5433572 0.2699778 #> Colorado       0.3612727 0.2133301 0.4253972 #> Washington     0.1956706 0.4162023 0.3881271 #> Iowa           0.1894373 0.5395477 0.2710150 #> Ohio           0.1587485 0.4923727 0.3488787 #> Rhode Island   0.2461388 0.4321363 0.3217249 #> Connecticut    0.1857163 0.5383286 0.2759551 #> Alabama        0.3725449 0.2621495 0.3653056 #> Louisiana      0.4240164 0.2317821 0.3442015 #> Nevada         0.4569696 0.2063121 0.3367184 #> Florida        0.5373729 0.1832801 0.2793469 #> Virginia       0.1748823 0.4467913 0.3783264 #> Missouri       0.0000000 0.0000000 1.0000000 #> Nebraska       0.1144836 0.6965148 0.1890016 #> Pennsylvania   0.1222504 0.6671431 0.2106065  # Determine distance matrix of the observations and cluster medoids USArrests_medoids <- USArrests[rownames(USArrests) %in% cc_fuzzy$medoids,] dist <- proxy::dist(x = USArrests_test[, -1], y = USArrests_medoids[, -1],                     method = \"euclidean\") #use same metric as above  # Make cluster prediction for test data  USArrests_clusters_predicted <- predict(object = cc_fuzzy,                                         newdata = USArrests_test,                                         dist_matrix = dist) USArrests_clusters_predicted$membership_scores #>                 Cluster1  Cluster2  Cluster3 #> Alaska         0.4183864 0.2390221 0.3425915 #> Delaware       0.2662189 0.3794404 0.3543406 #> Massachusetts  0.2195957 0.4471681 0.3332363 #> Michigan       0.6186898 0.1245516 0.2567585 #> Mississippi    0.3637007 0.2987573 0.3375420 #> Montana        0.1694664 0.5666950 0.2638386 #> New Hampshire  0.1968295 0.5273201 0.2758504 #> New York       0.4169648 0.2170146 0.3660205 #> North Carolina 0.3861993 0.2881459 0.3256548 #> South Dakota   0.2126881 0.4951130 0.2921988 #> Tennessee      0.3362672 0.2452547 0.4184781 #> Texas          0.3475477 0.2246028 0.4278495 #> Utah           0.2007003 0.4581080 0.3411917 #> West Virginia  0.2347547 0.4599033 0.3053420 #> Wisconsin      0.1788601 0.5586124 0.2625275"},{"path":"/reference/print.fuzzyclara.html","id":null,"dir":"Reference","previous_headings":"","what":"Print output of ","title":"Print output of ","text":"Function provide graphical visualization distribution","code":""},{"path":"/reference/print.fuzzyclara.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print output of ","text":"","code":"# S3 method for class 'fuzzyclara' print(x, ...)"},{"path":"/reference/print.fuzzyclara.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print output of ","text":"x object class \"fuzzyclara\" ... additional arguments","code":""},{"path":"/reference/print.fuzzyclara.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Print output of ","text":"printed output","code":""},{"path":"/reference/print_logMessage.html","id":null,"dir":"Reference","previous_headings":"","what":"Print diagnostic messages to console or log file — print_logMessage","title":"Print diagnostic messages to console or log file — print_logMessage","text":"Print diagnostic messages console log file","code":""},{"path":"/reference/print_logMessage.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Print diagnostic messages to console or log file — print_logMessage","text":"","code":"print_logMessage(message, verbose_toLogFile = FALSE, reset_logFile = FALSE)"},{"path":"/reference/print_logMessage.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Print diagnostic messages to console or log file — print_logMessage","text":"message Diagnostic message character verbose_toLogFile TRUE, diagnostic messages printed log file clustering_progress.log. Defaults FALSE. reset_logFile TRUE, log file clustering_progress.log newly created current working directory, potential previous version deleted. Defaults FALSE.","code":""},{"path":"/reference/travel.html","id":null,"dir":"Reference","previous_headings":"","what":"Data from the German Reiseanalyse survey — travel","title":"Data from the German Reiseanalyse survey — travel","text":"dataset Reiseanalyse survey comprises travel information German travelers 2009 2018. Data collected yearly repeated cross-sectional survey German pleasure travels, based sample representative German-speaking residents Germany. Note sample contains trips least five days trip length.","code":""},{"path":"/reference/travel.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data from the German Reiseanalyse survey — travel","text":"","code":"data(travel)"},{"path":"/reference/travel.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Data from the German Reiseanalyse survey — travel","text":"dataframe containing travel_year Year respondent traveled. number_trips Number trips respondent respective year. totalExpenses Summed (inflation-adjusted, base year 2018) expenses (€) respondent trips respective year. max_travelDistance Maximum travel distance (km) among trips respondent respective year. max_tripLength Maximum trip length (days) among trips respondent respective year.","code":""},{"path":"/reference/travel.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Data from the German Reiseanalyse survey — travel","text":"data 20% random sample respondents undertook least one trip respective year, 2010 2018. thank Forschungsgemeinschaft Urlaub und Reisen e.V. allowing us publish sample.","code":""},{"path":"/reference/travel.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Data from the German Reiseanalyse survey — travel","text":"Forschungsgemeinschaft Urlaub und Reisen e.V. (FUR) (2020b) Survey tourist demand Germany holiday travel short breaks. Available : https://reiseanalyse.de/wp-content/uploads/2019/08/RA2020_Infoflyer_EN.pdf (accessed 22 November 2021).","code":""},{"path":"/news/index.html","id":"fuzzyclara-100-2022-09","dir":"Changelog","previous_headings":"","what":"fuzzyclara 1.0.0 (2022-09)","title":"fuzzyclara 1.0.0 (2022-09)","text":"First stable package version","code":""}]
